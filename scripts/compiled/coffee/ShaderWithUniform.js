// Generated by CoffeeScript 1.6.3
(function() {
  var ShaderWithUniform,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ShaderWithUniform = (function(_super) {
    __extends(ShaderWithUniform, _super);

    function ShaderWithUniform() {
      var light;
      ShaderWithUniform.__super__.constructor.call(this);
      this.clock = new THREE.Clock();
      light = new THREE.DirectionalLight(0xFFFFFF);
      light.position.x = 10;
      light.position.y = 200;
      light.position.z = 130;
      this.scene.add(light);
      this.drawScene();
    }

    ShaderWithUniform.prototype.createShaders = function() {
      var pShader, vShader;
      vShader = "void main(void) {\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}";
      pShader = "uniform float time;\n\nvoid main(){\n    float r = cos(time);\n    float g = sin(time);\n    float b = tan(time);\n\n    gl_FragColor = vec4(r, 1.0 - g , b, 1.0);\n}";
      this.uniforms = {
        time: {
          type: 'f',
          value: 0.0
        }
      };
      return this.shaderMaterial = new THREE.ShaderMaterial({
        uniforms: this.uniforms,
        vertexShader: vShader,
        fragmentShader: pShader
      });
    };

    ShaderWithUniform.prototype.drawScene = function() {
      var pyGeometry;
      pyGeometry = this.makeGeometry([[0, 10, 0], [-10, -10, 10], [10, -10, 10], [10, -10, -10], [-10, -10, -10]], [[0, 1, 2], [0, 2, 3], [0, 3, 4], [0, 4, 1]]);
      this.createShaders();
      this.pyramid = new THREE.Mesh(pyGeometry, this.shaderMaterial);
      return this.scene.add(this.pyramid);
    };

    ShaderWithUniform.prototype.render = function() {
      var delta;
      delta = 5 * this.clock.getDelta();
      this.uniforms.time.value += 0.2 * delta;
      this.pyramid.rotation.y += 0.1 * delta;
      return ShaderWithUniform.__super__.render.call(this);
    };

    return ShaderWithUniform;

  })(App);

  window.ShaderWithUniform = ShaderWithUniform;

}).call(this);
